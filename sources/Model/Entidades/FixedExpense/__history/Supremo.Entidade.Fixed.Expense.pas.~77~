unit Supremo.Entidade.Fixed.Expense;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Entidades.Interfaces,
  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory;

type
  TFixedExpense = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData : Integer;
    FEscolhaTipoLancamento : Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus : Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo : String;
    FIdProduto : String;
    FIdParametro1 : String;
    FIdParametro2 : String;
    FValorLancamento1 : Currency;
    FValorLancamento2 : Currency;
    FQtdeInteger : Integer;
    FQtdeCurrency : Currency;
    FAliquota : Currency;
    FPrazoMedio : Currency;
    FInicioPeriodo : TDateTime;
    FFimPeriodo : TDateTime;

    FGenId : Integer;

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue : Integer) : iModelEntidade;
    function EscolhaTipoLancamento(aValue : Integer) : iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue : Integer) :iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue : String) : iModelEntidade;
    function IdParametro2(aValue : String) : iModelEntidade;
    function ValorLancamento1(aValue : Currency) : iModelEntidade;
    function ValorLancamento2(aValue : Currency) : iModelEntidade;
    function Qtde(aValue : Integer) : iModelEntidade; overload;
    function Qtde(aValue : Currency) : iModelEntidade; overload;
    function Aliquota(aValue : Currency) : iModelEntidade;
    function PrazoMedio(aValue : Currency) : iModelEntidade;
    function InicioPeriodo(aValue : TDateTime) : iModelEntidade;
    function FimPeriodo(aValue : TDateTime) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert : iModelEntidade; overload;
    function Insert(aValue : String) : iModelEntidade; overload;
    function Append : iModelEntidade;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue: String): iModelEntidade;
    function PegarGenId: Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TFixedExpense }

constructor TFixedExpense.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TFixedExpense.Destroy;
begin
  inherited;
end;

class function TFixedExpense.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TFixedExpense.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TFixedExpense.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TFixedExpense.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TFixedExpense.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TFixedExpense.EscolhaTipoLancamento(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLancamento := aValue;
end;

function TFixedExpense.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TFixedExpense.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TFixedExpense.Status(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TFixedExpense.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TFixedExpense.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TFixedExpense.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TFixedExpense.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TFixedExpense.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TFixedExpense.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TFixedExpense.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TFixedExpense.ValorLancamento1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TFixedExpense.ValorLancamento2(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TFixedExpense.Qtde(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TFixedExpense.Qtde(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;

function TFixedExpense.Aliquota(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota := aValue;
end;

function TFixedExpense.PrazoMedio(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TFixedExpense.InicioPeriodo(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TFixedExpense.FimPeriodo(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TFixedExpense.Buscar(aValue: String): iModelEntidade;
const
    cSQL = (
            'select ' +
            'df.id, ' +
            'df.idclassecontas, ' +
            'ccc.descricao, ' +
            'df.valor, ' +
            'df.origem, ' +
            'df.datalancamento, ' +
            'df.operador, ' +
            'df.ativo ' +
            'from despesafixa df ' +
            'inner join cad_classe_contas ccc on ccc.id_ccc = df.IdClasseContas '
           );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where df.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and df.Id=' +IntToStr(StrToInt(aValue)) + ' ');
      1: lWhere := lWhere + ('and df.IdClasseContas=' +IntToStr(StrToInt(aValue)) + ' ');
      2: lWhere := lWhere + ('and ccc.Descricao CONTAINING ''' + aValue + ''' ');
      3: lWhere := lWhere + ('and df.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(cSQL + lWhere);
end;

function TFixedExpense.Insert: iModelEntidade;
const
  cInsert =(
                'insert into DespesaFixa ' +
                '( ' +
                'IdClasseContas, ' +
                'Valor, ' +
                'Origem, '+
                'DataLancamento, ' +
                'Operador, '+
                'Ativo ' +
                ') '
               );
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';

  lInsert := cInsert +
    'values ' +
    '( ' +
    ''''+ FIdParametro1 +''','+
    StringReplace(CurrToStr(FValorLancamento1), ',', '.', [RFReplaceAll]) + ',' + // VL_Parcela
    IntToStr(FStatus)+','+//Origem 1-> vem do contas a pagar 2-> Lançamento manual
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    '''' + FOperador + ''',' +
    IntToStr(1)+' '+//Ativo 0->Inativo  - 1 Ativo
    ') ';
  FQuery.ExecSQL(lInsert);
end;

function TFixedExpense.Insert(aValue : String): iModelEntidade;
const
cInsert =(
          'insert into MovimentoDespesaFixa ' +
          '( ' +
          'IdDespesa, ' +
          'Origem, '+
          'DataLancamento, ' +
          'Operador '+
          ') '
         );
var
  lInsert: String;
begin
  Result := Self;

  lInsert := cInsert +
    'values ' +
    '( ' +
    ''''+(aValue) +''','+//IdDespesaFixa
    IntToStr(3)+','+//Origem 1-> vem do contas a pagar 2-> Lançamento manual 3-> Registro deletado
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    '''' + FOperador + '''' +
    ') ';
  FQuery.ExecSQL(lInsert);
end;

function TFixedExpense.Append : iModelEntidade;
begin
  Result := Self;
  FQuery.Append('');
end;

function TFixedExpense.Update(aValue: String): iModelEntidade;
begin
  Result := Self;
end;

function TFixedExpense.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  FQuery.ExecSQL('delete from DespesaFixa where IdClasseContas='+aValue+' ');
end;

function TFixedExpense.PegarGenId: Integer;
begin
  Result := 0;
  //Criar o GenId quando precisar
end;


//JSON
function TFixedExpense.Get(const aValue: String): iModelEntidade;
begin
  Result := Self;
  // JSon completar quando precisar usar
end;




end.
