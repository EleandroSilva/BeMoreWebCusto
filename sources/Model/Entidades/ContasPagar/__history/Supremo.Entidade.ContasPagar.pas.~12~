unit Supremo.Entidade.ContasPagar;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Entidades.Interfaces,
  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory;

type
  TContasPagar = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;
    FEscolhaFiltro: Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo: String;
    FIdProduto: String;
    FIdClasseContas: String;

    FValorLancamento: currency;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro(aValue : String) : iModelEntidade;
    function ValorLancamento(aValue : Currency) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade; overload;
    function Insert(aValue: String): iModelEntidade; overload;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue: String): iModelEntidade;
    function PegarGenId: Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TContasPagar }


constructor TContasPagar.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TContasPagar.Destroy;
begin
  inherited;
end;

class function TContasPagar.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TContasPagar.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TContasPagar.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TContasPagar.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TContasPagar.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TContasPagar.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TContasPagar.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TContasPagar.IdParametro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdClasseContas := aValue;
end;

function TContasPagar.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TContasPagar.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TContasPagar.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TContasPagar.ValorLancamento(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento := aValue;
end;

function TContasPagar.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TContasPagar.Buscar(aValue: String): iModelEntidade;
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where df.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and df.Id=' + aValue + ' ');
      1: lWhere := lWhere + ('and ccc.Descricao CONTAINING ''' + aValue + ''' ');
      2: lWhere := lWhere + ('and df.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(constSQL + lWhere);
end;

function TContasPagar.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
end;

function TContasPagar.Insert: iModelEntidade;
begin
  Result := Self;
end;

function TContasPagar.Insert(aValue: String): iModelEntidade;
begin
 Result := Self;
end;

function TContasPagar.Update(aValue: String): iModelEntidade;
begin
  Result := Self;
end;

function TContasPagar.PegarGenId: Integer;
begin
  Result :=0;//Criar quando precisar
end;

function TContasPagar.Get(const aValue: String): iModelEntidade;
begin
 Result := Self;
 //criar Json quando precisar
end;


end.
