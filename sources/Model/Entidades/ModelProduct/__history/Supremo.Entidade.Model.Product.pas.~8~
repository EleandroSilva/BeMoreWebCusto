unit Supremo.Entidade.Model.Product;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory,
  Whorkshop.Model.Entidades.Interfaces;

type
  TModelProduct = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData : Integer;
    FEscolhaTipoLancamento : Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus : Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo : String;
    FIdProduto : String;
    FIdParametro1 : String;
    FIdParametro2 : String;
    FValorLancamento1 : Currency;
    FValorLancamento2 : Currency;
    FValorLancamento3 : Currency;
    FValorLancamento4 : Currency;
    FQtdeInteger : Integer;
    FQtdeCurrency : Currency;
    FAliquota1 : Currency;
    FAliquota2 : Currency;
    FAliquota3 : Currency;
    FAliquota4 : Currency;
    FPrazoMedio : Currency;
    FInicioPeriodo : TDateTime;
    FFimPeriodo : TDateTime;

    FGenId : Integer;

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue : Integer) : iModelEntidade;
    function EscolhaTipoLancamento(aValue : Integer) : iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue : Integer) :iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue : String) : iModelEntidade;
    function IdParametro2(aValue : String) : iModelEntidade;
    function ValorLancamento1(aValue : Currency) : iModelEntidade;
    function ValorLancamento2(aValue : Currency) : iModelEntidade;
    function ValorLancamento3(aValue : Currency) : iModelEntidade;
    function ValorLancamento4(aValue : Currency) : iModelEntidade;
    function Qtde(aValue : Integer) : iModelEntidade; overload;
    function Qtde(aValue : Currency) : iModelEntidade; overload;
    function Aliquota1(aValue : Currency) : iModelEntidade;
    function Aliquota2(aValue : Currency) : iModelEntidade;
    function Aliquota3(aValue : Currency) : iModelEntidade;
    function Aliquota4(aValue : Currency) : iModelEntidade;
    function PrazoMedio(aValue : Currency) : iModelEntidade;
    function InicioPeriodo(aValue : TDateTime) : iModelEntidade;
    function FimPeriodo(aValue : TDateTime) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade; overload;
    function Insert(aValue : String): iModelEntidade; overload;
    function Append : iModelEntidade;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue : String) : iModelEntidade;
    function PegarGenId : Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TModelProduct }

constructor TModelProduct.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TModelProduct.Destroy;
begin
  inherited;
end;

class function TModelProduct.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TModelProduct.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TModelProduct.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TModelProduct.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TModelProduct.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TModelProduct.EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLancamento := aValue;
end;

function TModelProduct.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TModelProduct.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TModelProduct.Status(aValue : Integer) :iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TModelProduct.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TModelProduct.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TModelProduct.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TModelProduct.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TModelProduct.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TModelProduct.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TModelProduct.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TModelProduct.ValorLancamento1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TModelProduct.ValorLancamento2(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TModelProduct.ValorLancamento3(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento3 := aValue;
end;

function TModelProduct.ValorLancamento4(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento4 := aValue;
end;

function TModelProduct.Qtde(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TModelProduct.Qtde(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;

function TModelProduct.Aliquota1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FAliquota1 := aValue;
end;

function TModelProduct.Aliquota2(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota2 := aValue;
end;

function TModelProduct.Aliquota3(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota3 := aValue;
end;

function TModelProduct.Aliquota4(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota4 := aValue;
end;

function TModelProduct.PrazoMedio(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TModelProduct.InicioPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TModelProduct.FimPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TModelProduct.Buscar(aValue: String): iModelEntidade;
const
 cSQL = (
         'select distinct '+
         'mp.id, '+
         'imp.idmodelo, '+
         'm.descricao Modelo, '+
         'mp.datalancamento, '+
         'mp.operador, '+
         'mp.ativo, '+
         'imp.idproduto, '+
         'pro.descricao produto '+
         'from ModeloProduto mp '+
         'inner join ModeloProdutoItem imp on imp.id = mp.id ' +
         'inner join Modelo              m on m.id   = imp.idmodelo '+
         'inner join cad_pro           pro on pro.id_pro = imp.idproduto '
        );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where mp.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and mp.Id=' + aValue + ' ');
      1: lWhere := lWhere + ('and imp.IdModelo=' + aValue + ' ');
      2: lWhere := lWhere + ('and m.Descricao CONTAINING ''' + aValue + ''' ');
      3: lWhere := lWhere + ('and mp.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(cSQL + lWhere);
end;

function TModelProduct.Insert: iModelEntidade;
const
  cInsert = (
      'insert into modeloproduto ' +
      '( ' +
      'DataLancamento, ' +
      'Operador, ' +
      'Ativo ' +
      ') '
      );
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';

  lInsert := cInsert +
    'values ' +
    '( ' +
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    '''' + FOperador + ''',' +
    IntToStr(1) +' '+//Ativo
    ') ';
  FQuery.ExecSQL(lInsert);

  FGenId:= PegarGenId;
end;

function TModelProduct.Insert(aValue : String): iModelEntidade;
const
  cInsert = (
      'insert into modeloprodutoitem ' +
      '( ' +
      'Id, ' +
      'IdModelo, ' +
      'IdProduto ' +
      ') '
      );
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';
  lInsert := cInsert +
    'values ' +
    '( ' +
    IntToStr(FGenId) + ',' +
    '''' + FIdModelo + ''',' +
    '''' + FIdProduto + '''' +
    ') ';
  FQuery.ExecSQL(lInsert);
end;

function TModelProduct.Append : iModelEntidade;
begin
  Result := Self;
  FQuery.Append('');
end;

function TModelProduct.Update(aValue: String): iModelEntidade;
const
  constUpdate = ('update modelo set ');
begin
  Result := Self;
  FQuery.ExecSQL(constUpdate +
    'descricao=''' + FDescricao + ''',' +
    'ativo=' + IntToStr(FAtivo) + '' +
    'where Id=' + aValue + ' ');
end;

function TModelProduct.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  FQuery.ExecSQL('delete from ModeloProduto where Id='+aValue+'');
end;

function TModelProduct.PegarGenId : Integer;
const
  cPegarGenId = ('select gen_id(GEN_MODELOPRODUTO_ID,0) from rdb$database ');
begin
  Result := 0;
  Result:=FQuery.PegarGenId(cPegarGenId);
end;

//JSON
function TModelProduct.Get(const aValue: String): iModelEntidade;
const
  cSQL = (
          'select '+
          'imp.idproduto, '+
          'pro.descricao Produto '+
          'from ModeloProdutoItem imp '+
          'inner join ModeloProdutoItem imp on imp.id = mp.id ' +
          'inner join Modelo              m on m.id   = imp.idmodelo '+
          'inner join cad_pro           pro on pro.id_pro = imp.idproduto '
         );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where mp.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and mp.Id=' + aValue + ' ');
      1: lWhere := lWhere + ('and imp.IdModelo=' + aValue + ' ');
      2: lWhere := lWhere + ('and m.Descricao CONTAINING ''' + aValue + ''' ');
      3: lWhere := lWhere + ('and mp.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Get(cSQL + lWhere);
end;

end.
