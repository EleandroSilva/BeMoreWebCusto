unit Supremo.Entidade.Custo.Financeiro;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Entidades.Interfaces,
  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory;

type
  TCustoFinanceiro = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData: Integer;
    FEscolhaTipoLacamento : Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus: Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo: String;
    FIdProduto: String;
    FIdParametro1: String;
    FIdParametro2: String;
    FValorLancamento1 : Currency;
    FValorLancamento2 : Currency;
    FValorLancamento3 : Currency;
    FValorLancamento4 : Currency;
    FQtdeInteger : Integer;
    FQtdeCurrency : Currency;
    FAliquota1: Currency;
    FAliquota2: Currency;
    FAliquota3: Currency;
    FAliquota4: Currency;
    FPrazoMedio : Currency;
    FInicioPeriodo : TDateTime;
    FFimPeriodo : TDateTime;

    FGenId: Integer;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue: Integer): iModelEntidade;
    function EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue: Integer): iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue: String): iModelEntidade;
    function IdParametro2(aValue: String): iModelEntidade;
    function ValorLancamento1(aValue: Currency): iModelEntidade;
    function ValorLancamento2(aValue: Currency): iModelEntidade;
    function ValorLancamento3(aValue : Currency) : iModelEntidade;
    function ValorLancamento4(aValue : Currency) : iModelEntidade;
    function Qtde(aValue : Integer) : iModelEntidade; overload;
    function Qtde(aValue : Currency) : iModelEntidade; overload;
    function Aliquota(aValue: Currency): iModelEntidade;
    function PrazoMedio(aValue : Currency) : iModelEntidade;
    function InicioPeriodo(aValue : TDateTime) : iModelEntidade;
    function FimPeriodo(aValue : TDateTime) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade; overload;
    function Insert(aValue: String): iModelEntidade; overload;
    function Append : iModelEntidade;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue: String): iModelEntidade;
    function PegarGenId: Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TMarkupCustoFinanceiro }


constructor TCustoFinanceiro.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TCustoFinanceiro.Destroy;
begin
  inherited;
end;

class function TCustoFinanceiro.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TCustoFinanceiro.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TCustoFinanceiro.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TCustoFinanceiro.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TCustoFinanceiro.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TCustoFinanceiro.EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLacamento := aValue;
end;

function TCustoFinanceiro.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TCustoFinanceiro.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TCustoFinanceiro.Status(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TCustoFinanceiro.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TCustoFinanceiro.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TCustoFinanceiro.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TCustoFinanceiro.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TCustoFinanceiro.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TCustoFinanceiro.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TCustoFinanceiro.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TCustoFinanceiro.ValorLancamento1(aValue: currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TCustoFinanceiro.ValorLancamento2(aValue: currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TCustoFinanceiro.ValorLancamento3(aValue: currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento3 := aValue;
end;

function TCustoFinanceiro.ValorLancamento4(aValue: currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento4 := aValue;
end;

function TCustoFinanceiro.Qtde(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TCustoFinanceiro.Qtde(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;

function TCustoFinanceiro.Aliquota(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota := aValue;
end;

function TCustoFinanceiro.PrazoMedio(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TCustoFinanceiro.InicioPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TCustoFinanceiro.FimPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TCustoFinanceiro.Buscar(aValue: String): iModelEntidade;
const
  cSQL = (
          'select '+
          'Id, '+
          'IdAliquotaNome, '+
          'AliquotaNome, '+
          'Aliquota, '+
          'IndiceFinanceiro, '+
          'IdPagamento, '+
          'PagamentoNome, '+
          'PrazoMedio, '+
          'cast(IndiceFinanceiro*PrazoMedio as numeric(10,2)) JurosFinanceiro, '+
          'Operador, '+
          'DataLancamento, '+
          'Status, '+
          'Ativo ' +
          'from '+
          '( '+
          'select '+
          'cf.Id, '+
          'cf.IdAliquotaNome, '+
          'an.descricao AliquotaNome, '+
          'an.aliquota, '+
          'cast(an.Aliquota/30.01 as numeric(10,5)) IndiceFinanceiro, '+
          'cf.idpagamento, '+
          'pgto.descricao PagamentoNome, '+
          'cast(pgto.TT_Dias/pgto.Qtde_Pgto as numeric(10,2)) PrazoMedio, '+
          'cf.Operador, '+
          'cf.DataLancamento, '+
          'cf.Status, '+
          'cf.Ativo '+
          'from CustoFinanceiro cf '+
          'inner join AliquotaNome an on an.id   = cf.IdaliquotaNome '+
          'inner join cad_prazo  pgto on pgto.id = cf.IdPagamento ) '
         );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and Id=' +IntToStr(StrToInt(aValue)) + ' ');
      1: lWhere := lWhere + ('and IdAliquotaNome=' +IntToStr(StrToInt(aValue)) + ' ');
      2: lWhere := lWhere + ('and IdPagamento=' +IntToStr(StrToInt(aValue)) + ' ');
      3: lWhere := lWhere + ('and AliquotaNome CONTAINING ''' + aValue + ''' ');
      4: lWhere := lWhere + ('and PagamentoNome CONTAINING ''' + aValue + ''' ');
      5: lWhere := lWhere + ('and Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(cSQL + lWhere);
end;

function TCustoFinanceiro.Insert: iModelEntidade;
const
    cInsert = (
               'insert into CustoFinanceiro ' +
               '( ' +
               'IdAliquotaNome, ' +
               'IdPagamento, ' +
               'PrazoMedio, '+
               'Operador, '+
               'DataLancamento, ' +
               'Status, '+
               'Ativo ' +
               ') '
              );
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';

  lInsert := cInsert +
    'values ' +
    '( ' +
    ''+FIdParametro1+', '+//IdAliquotaNome--Tabela AliquotaNota ID
    ''+FIdParametro2+', '+//IdPagamento --Tabela Cad_Prazo ID
    StringReplace(CurrToStr(FPrazoMedio), ',', '.', [RFReplaceAll]) + ',' + //Prazo Medio
    '''' + FOperador + ''',' +
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    IntToStr(1)+', '+//Status
    IntToStr(1)+' '+//Ativo 0->Inativo  - 1 Ativo
    ') ';
  FQuery.ExecSQL(lInsert);
end;

function TCustoFinanceiro.Insert(aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar Json quando precisar
end;

function TCustoFinanceiro.Append : iModelEntidade;
begin
  Result := Self;
  FQuery.Append('');
end;

function TCustoFinanceiro.Update(aValue: String): iModelEntidade;
const
  cUpdate = ('update Aliquota set ');
begin
  Result := Self;
  FQuery.ExecSQL(cUpdate +
    'descricao=''' + FDescricao + ''',' +
    'ativo=' + IntToStr(FAtivo) + '' +
    'where Id=' + aValue + ' ');
end;

function TCustoFinanceiro.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  FQuery.ExecSQL('delete from Aliquota where Id='+aValue+'');
end;

function TCustoFinanceiro.PegarGenId: Integer;
begin
  Result := 0;
  //Criar PegarGenId quando precisar
end;


//JSON
function TCustoFinanceiro.Get(const aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar Delete quando precisar
end;

end.
