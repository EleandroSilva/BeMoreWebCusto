unit Supremo.Entidade.Materia.Prima;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Entidades.Interfaces,
  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory;

type
  TMateriaPrima = class (TInterfacedObject, iModelEntidade)
    private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData : Integer;
    FEscolhaTipoLancamento : Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus : Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo : String;
    FIdProduto : String;
    FIdParametro1 : String;
    FIdParametro2 : String;
    FValorLancamento1 : Currency;
    FValorLancamento2 : Currency;
    FValorLancamento3 : Currency;
    FValorLancamento4 : Currency;
    FQtdeInteger : Integer;
    FQtdeCurrency : Currency;
    FAliquota : Currency;
    FPrazoMedio : Currency;
    FInicioPeriodo : TDateTime;
    FFimPeriodo : TDateTime;

    FGenId : Integer;

    public
    constructor Create;
    destructor Destroy; override;
    class function New : iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue : Integer) : iModelEntidade;
    function EscolhaTipoLancamento(aValue : Integer) : iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue : Integer) :iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue : String) : iModelEntidade;
    function IdParametro2(aValue : String) : iModelEntidade;
    function ValorLancamento1(aValue : Currency) : iModelEntidade;
    function ValorLancamento2(aValue : Currency) : iModelEntidade;
    function ValorLancamento3(aValue : Currency) : iModelEntidade;
    function ValorLancamento4(aValue : Currency) : iModelEntidade;
    function Qtde(aValue : Integer) : iModelEntidade; overload;
    function Qtde(aValue : Currency) : iModelEntidade; overload;
    function Aliquota(aValue : Currency) : iModelEntidade;
    function PrazoMedio(aValue : Currency) : iModelEntidade;
    function InicioPeriodo(aValue : TDateTime) : iModelEntidade;
    function FimPeriodo(aValue : TDateTime) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade; overload;
    function Insert(aValue: String): iModelEntidade; overload;
    function Append : iModelEntidade;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue: String): iModelEntidade;
    function PegarGenId: Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TMateriaPrima }


constructor TMateriaPrima.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TMateriaPrima.Destroy;
begin
  inherited;
end;

class function TMateriaPrima.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TMateriaPrima.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TMateriaPrima.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TMateriaPrima.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TMateriaPrima.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TMateriaPrima.EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLancamento := aValue;
end;

function TMateriaPrima.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TMateriaPrima.Ativo(aValue: Integer): iModelEntidade;
begin
  Result:= Self;
  FAtivo := AValue;
end;

function TMateriaPrima.Status(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TMateriaPrima.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TMateriaPrima.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TMateriaPrima.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TMateriaPrima.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TMateriaPrima.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TMateriaPrima.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TMateriaPrima.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TMateriaPrima.ValorLancamento1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TMateriaPrima.ValorLancamento2(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TMateriaPrima.ValorLancamento3(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento3 := aValue;
end;

function TMateriaPrima.ValorLancamento4(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento4 := aValue;
end;

function TMateriaPrima.Qtde(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TMateriaPrima.Qtde(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;

function TMateriaPrima.Aliquota(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FAliquota := aValue;
end;

function TMateriaPrima.PrazoMedio(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TMateriaPrima.InicioPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TMateriaPrima.FimPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TMateriaPrima.Buscar(aValue: String): iModelEntidade;
const
  cSQL = (
         'select '+
         'mp.id, '+
         'mp.descricao, '+
         'mp.un, '+
         'mp.vl_liquido, '+
         'mp.vl_unitario, '+
         'mp.usuario Operador, '+
         'mp.Status, '+
         'mp.Ativo '+
         'from cad_gmp mp '
         );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where mp.Ativo=''SIM'' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and mp.Id=' +IntToStr(StrToInt(aValue)) + ' ');
      1: lWhere := lWhere + ('and mp.Descricao CONTAINING ''' + aValue + ''' ');
      2: lWhere := lWhere + ('and mp.Usuario CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(cSQL + lWhere);
end;

function TMateriaPrima.Insert(aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar isert into quando precisar
end;

function TMateriaPrima.Insert: iModelEntidade;
begin
  Result := Self;
  //Criar insert quando precisar
end;

function TMateriaPrima.Append : iModelEntidade;
begin
  Result := Self;
  FQuery.Append('');
end;

function TMateriaPrima.Update(aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar Update quando precisar
end;

function TMateriaPrima.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar Delete quando precisar
end;

function TMateriaPrima.PegarGenId: Integer;
begin
  Result := 0;
  //Criar quando precisar
end;

function TMateriaPrima.Get(const aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar Json quando precisar
end;

end.
