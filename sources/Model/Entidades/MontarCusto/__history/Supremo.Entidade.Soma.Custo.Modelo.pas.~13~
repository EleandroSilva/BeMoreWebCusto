unit Supremo.Entidade.Soma.Custo.Modelo;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Entidades.Interfaces,
  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory;

Type
  TSomaCustoModelo = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData: Integer;
    FEscolhaTipoLancamento: Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus: Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo: String;
    FIdProduto: String;
    FIdParametro1: String;
    FIdParametro2: String;
    FValorLancamento1: Currency;
    FValorLancamento2: Currency;
    FValorLancamento3: Currency;
    FValorLancamento4: Currency;
    FQtdeInteger: Integer;
    FQtdeCurrency: Currency;
    FAliquota: Currency;
    FPrazoMedio: Currency;
    FInicioPeriodo: TDateTime;
    FFimPeriodo: TDateTime;

    FGenId: Integer;

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue: Integer): iModelEntidade;
    function EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue: Integer): iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue: String): iModelEntidade;
    function IdParametro2(aValue: String): iModelEntidade;
    function ValorLancamento1(aValue: Currency): iModelEntidade;
    function ValorLancamento2(aValue: Currency): iModelEntidade;
    function ValorLancamento3(aValue: Currency): iModelEntidade;
    function ValorLancamento4(aValue: Currency): iModelEntidade;
    function Qtde(aValue: Integer): iModelEntidade; overload;
    function Qtde(aValue: Currency): iModelEntidade; overload;
    function Aliquota(aValue: Currency): iModelEntidade;
    function PrazoMedio(aValue: Currency): iModelEntidade;
    function InicioPeriodo(aValue: TDateTime): iModelEntidade;
    function FimPeriodo(aValue: TDateTime): iModelEntidade;

    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade; overload;
    function Insert(aValue: String): iModelEntidade; overload;
    function Append: iModelEntidade;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue: String): iModelEntidade;
    function PegarGenId: Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;


implementation

{ TSomaCustoModelo }

constructor TSomaCustoModelo.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TSomaCustoModelo.Destroy;
begin
  inherited;
end;

class function TSomaCustoModelo.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TSomaCustoModelo.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TSomaCustoModelo.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TSomaCustoModelo.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TSomaCustoModelo.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TSomaCustoModelo.EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLancamento := aValue;
end;

function TSomaCustoModelo.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TSomaCustoModelo.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TSomaCustoModelo.Status(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TSomaCustoModelo.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TSomaCustoModelo.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TSomaCustoModelo.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TSomaCustoModelo.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TSomaCustoModelo.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TSomaCustoModelo.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TSomaCustoModelo.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TSomaCustoModelo.ValorLancamento1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TSomaCustoModelo.ValorLancamento2(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TSomaCustoModelo.ValorLancamento3(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento3 := aValue;
end;

function TSomaCustoModelo.ValorLancamento4(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento4 := aValue;
end;

function TSomaCustoModelo.Qtde(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TSomaCustoModelo.Qtde(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;

function TSomaCustoModelo.Aliquota(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FAliquota := aValue;
end;

function TSomaCustoModelo.PrazoMedio(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TSomaCustoModelo.InicioPeriodo(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TSomaCustoModelo.FimPeriodo(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TSomaCustoModelo.Buscar(aValue: String): iModelEntidade;
const
  cSQL = ('select ' +
    'IdModelo, ' +
    'ModeloNome, ' +
    'QtdeProducao, ' +
    'SomaDespesaFixa, ' +
    'SomaCustoDespesaFixa, ' +
    'SomCustoFichaTecnica, ' +
    '(SomCustoFichaTecnica+SomaCustoDespesaFixa) PrecoCusto ' +
    'from ' +
    '( ' +
    'Select ' +
    ' ft.idmodelo, ' +
    ' m.descricao ModeloNome, ' +
    ' ft.qtdeproducao, ' +
    ' coalesce(cast(sum(fti.valorfinal) as numeric(10,2)),0) SomCustoFichaTecnica ' +
    ', ' +
    '( ' +
    ' select ' +
    '    coalesce(cast(sum(df.valor) as numeric(10,2)),0) SomaDespesaFixa ' +
    '   from despesafixa df ' +
    ' ) ' +
    ' , ' +
    '( ' +
    ' select ' +
    '    coalesce(cast(sum(df.valor/ft.qtdeproducao) as numeric(10,2)),0) SomaCustoDespesaFixa ' +
    '   from despesafixa df ' +
    ' ) ' +
    'from fichatecnica ft ' +
    'inner join Modelo             m on m.Id               = ft.idmodelo ' +
    'inner join fichatecnicaitem fti on fti.idfichatecnica = ft.id ');
var
  lWhere, lGrupo, lFechaAspa: String;
begin
  Result := Self;
  lWhere := '';
  lGrupo := '';
  lFechaAspa := '';

  lWhere := ('where ft.Ativo=' + IntToStr(FAtivo) + ' '+
  'and ft.IdModelo='+aValue+'');

  lGrupo := ('group by 1,2,3 ');
  lFechaAspa := (')');

  FQuery.Open(cSQL + lWhere + lGrupo + lFechaAspa);
end;

function TSomaCustoModelo.Insert: iModelEntidade;
begin
  Result := Self;
  // FQuery.ExecSQL(lInsert);
end;

function TSomaCustoModelo.Insert(aValue: String): iModelEntidade;
begin
  Result := Self;
  // Criar Json quando precisar
end;

function TSomaCustoModelo.Append: iModelEntidade;
begin
  Result := Self;
  FQuery.Append('');
end;

function TSomaCustoModelo.Update(aValue: String): iModelEntidade;
begin
  Result := Self;
  // FQuery.ExecSQL();
end;

function TSomaCustoModelo.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  // FQuery.ExecSQL('');
end;

function TSomaCustoModelo.PegarGenId: Integer;
begin
  Result := 0;
  // Criar PegarGenId quando precisar
end;

// JSON
function TSomaCustoModelo.Get(const aValue: String): iModelEntidade;
begin
  Result := Self;
  // Criar Delete quando precisar
end;

end.
