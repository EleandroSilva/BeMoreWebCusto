unit Model.Entidade.Lucro.Pedido;

interface

uses
  System.SysUtils,
  System.IniFiles,

  Vcl.Forms,

  FireDAC.Comp.Client,

  udmPrincipal;


type
  TLucroPedido = class
  private
    FIdPedido           : Integer;
    FIdProduto          : Integer;
    FIdRegiao           : Integer;
    FValorPedido        : Currency;
    FValorUnitario      : Currency;
    FQtde               : Currency;
    FSomaItem           : Currency;
    FValorCusto         : Currency;
    FSomaTabela         : Currency;
    FValorTabela        : Currency;
    FSomaCusto          : Currency;
    FAliquotaItem       : Currency;
    FAliquotaFinal      : Currency;
    FStatus             : Integer;
    FDataLancamento     : TDateTime;
    FHoraLancamento     : TDateTime;
    FOperador           : String;
    FTipoFiltro         : Integer;
    FDataInicio         : TDateTime;
    FDataFim            : TDateTime;

    FSomar              : Currency;
    FSomar1             : Currency;

    FSQL  : string;
    FWhere: string;
    FGrupo: String;
    FOrdem: string;

    FDQueryDelete : TFDQuery;
    FDQueryUpdate : TFDQuery;
    FDQueryBuscar : TFDQuery;
    FDQueryInsert : TFDQuery;
    FChamarFormLucroPedido: Integer;
    FFiltrarComPeriodo: Boolean;



    procedure SetIdPedido           (const Value: Integer);
    procedure SetIdProduto          (const Value: Integer);
    procedure SetIdRegiao           (const Value: Integer);
    procedure SetValorPedido        (const Value: Currency);
    procedure SetValorUnitario      (const Value: Currency);
    procedure SetQtde               (const Value: Currency);
    procedure SetSomaItem           (const Value: Currency);
    procedure SetValorCusto         (const Value: Currency);
    procedure SetSomaCusto          (const Value: Currency);
    procedure SetValorTabela        (const Value: Currency);
    procedure SetSomaTabela         (const Value: Currency);
    procedure SetAliquotaItem       (const Value: Currency);
    procedure SetAliquotaFinal      (const Value: Currency);
    procedure SetStatus             (const Value: Integer);
    procedure SetDataLancamento     (const Value: TDateTime);
    procedure SetHoraLancamento     (const Value: TDateTime);
    procedure SetOperador           (const Value: String);
    procedure SetTipoFiltro         (const Value: Integer);
    procedure SetDataFim            (const Value: TDateTime);
    procedure SetDataInicio         (const Value: TDateTime);

    function BuscarTabelaPreco: Boolean;
    procedure DeleteLucroPedido;
    procedure InsertTabelaLucroPedido;
    procedure SetChamarFormLucroPedido(const Value: Integer);
    procedure SetFiltrarComPeriodo(const Value: Boolean);



  public
    constructor Create;
    destructor Destroy; override;

    property IdPedido            : Integer   read FIdPedido            write SetIdPedido;
    property ValorPedido         : Currency  read FValorPedido         write SetValorPedido;
    property IdProduto           : Integer   read FIdProduto           write SetIdProduto;
    property IdRegiao            : Integer   read FIdRegiao            write SetIdRegiao;
    property ValorUnitario       : Currency  read FValorUnitario       write SetValorUnitario;
    property Qtde                : Currency  read FQtde                write SetQtde;
    property SomaItem            : Currency  read FSomaItem            write SetSomaItem;
    property ValorCusto          : Currency  read FValorCusto          write SetValorCusto;
    property SomaCusto           : Currency  read FSomaCusto           write SetSomaCusto;
    property ValorTabela         : Currency  read FValorTabela         write SetValorTabela;
    property SomaTabela          : Currency  read FSomaTabela          write SetSomaTabela;
    property AliquotaItem        : Currency  read FAliquotaItem        write SetAliquotaItem;
    property AliquotaFinal       : Currency  read FAliquotaFinal       write SetAliquotaFinal;
    property Status              : Integer   read FStatus              write SetStatus;
    property DataLancamento      : TDateTime read FDataLancamento      write SetDataLancamento;
    property HoraLancamento      : TDateTime read FHoraLancamento      write SetHoraLancamento;
    property Operador            : String    read FOperador            write SetOperador;
    property TipoFiltro          : Integer   read FTipoFiltro          write SetTipoFiltro;
    property DataInicio          : TDateTime read FDataInicio          write SetDataInicio;
    property DataFim             : TDateTime read FDataFim             write SetDataFim;
    property ChamarFormLucroPedido : Integer read FChamarFormLucroPedido write SetChamarFormLucroPedido;
    property FiltrarComPeriodo   : Boolean read FFiltrarComPeriodo write SetFiltrarComPeriodo;

    procedure BuscarPedido;
    function BuscarLucroPedido(aValue : String): Boolean;
    procedure GravarIdPedido(aIdPedido: Integer);
  end;

implementation

{ TLucroPedido }

constructor TLucroPedido.Create;
begin
  FDQueryDelete := TFDQuery.Create(nil);
  FDQueryUpdate := TFDQuery.Create(nil);
  FDQueryBuscar := TFDQuery.Create(nil);
  FDQueryInsert := TFDQuery.Create(nil);

  FDQueryDelete.Connection := dmPrincipal.FDConexao;
  FDQueryUpdate.Connection := dmPrincipal.FDConexao;
  FDQueryBuscar.Connection := dmPrincipal.FDConexao;
  FDQueryInsert.Connection := dmPrincipal.FDConexao;
end;

destructor TLucroPedido.Destroy;
begin
  FreeAndNil(FDQueryDelete);
  FreeAndNil(FDQueryUpdate);
  FreeAndNil(FDQueryBuscar);
  FreeAndNil(FDQueryInsert);
  inherited;
end;

procedure TLucroPedido.GravarIdPedido(aIdPedido: Integer);
var
  lArquivoIni: TIniFile;
  lDiretorio: string;
begin
  lDiretorio := (ExtractFilePath(Application.ExeName));
  lArquivoIni := TIniFile.Create(lDiretorio + 'IdPedidoLucro.ini');
  try
    lArquivoIni.WriteInteger('Informacao', 'IdPedidoLucro', aIdPedido);
    lArquivoIni.WriteInteger('Informacao', 'ChamarFormLucroPedido', FChamarFormLucroPedido);
  finally
    lArquivoIni.Free;
  end;
end;

function TLucroPedido.BuscarLucroPedido(aValue : String): Boolean;
const
  constSQL =('select '+
             'Id, '+
             'IdPedido, '+
             'IdPessoa, '+
             'NomePessoa, '+
             'Regiao, '+
             'Telefone, '+

             'DataPedido, '+
             'ValorPedido, '+
             'TotalCustoSemMarkup, '+
             'TotalCustoComMarkup, '+

             'SomarValorCustoSemMarkup, '+
             'SomaValorCustoComMarkup, '+
             'AliquotaFinal, '+
             'DiferencaPedido, '+

             'ValorCustoUnitario, '+
             'ValorCustoUnitarioMarkup, '+
             'ValorCustoUnitarioMaisMarkup, '+

             'IdProduto, '+
             'NomeProduto, '+
             'ValorUnitarioVendido, '+
             'Qtde, '+
             'SubTotalItens, '+
             'AliquotaItem '+

             'from '+
             ' ( '+
             '   select '+
             '     lp.Id, '+
             '     p.IdPessoa, '+
             '     c.Razao_Social NomePessoa, '+
             '     case when ((C.Fone is null) or (c.Fone='''')) then c.Celular else c.Fone '+
             '     end Telefone, '+
             '     r.descricao Regiao, '+
             '     lp.IdPedido, '+
             '     p.dt_cadastro DataPedido, '+
             '     p.Total ValorPedido, '+
             '     pro.id IdProduto, '+
             '     pro.descricao NomeProduto, '+
             '     lp.ValorUnitario ValorUnitarioVendido, '+
             '     lp.Qtde, '+
             '     lp.SomarItem SubTotalItens, '+
             '     lp.ValorCusto ValorCustoUnitario, '+
             '     lp.ValorCustoMarkup ValorCustoUnitarioMarkup, '+
             '     lp.valorcustocommarkup ValorCustoUnitarioMaisMarkup, '+
             '     lp.SomarCusto SomarValorCustoSemMarkup, '+
             '     lp.SomarValorCustoMarkup SomaValorCustoComMarkup, '+
             '     lp.AliquotaItem, '+
             '     lp.AliquotaFinal, '+
             '  ( '+
             '    select '+
             '      coalesce(cast(sum(lp1.SomarCusto) as numeric(10,2)),0) TotalCustoSemMarkup '+
             '    from LucroPedido lp1 '+
             '    where lp1.idpedido = p.Id '+
             '  ), '+

             '  ( '+
             '    select '+
             '      coalesce(cast(sum(lp1.somarvalorcustomarkup) as numeric(10,2)),0) TotalCustoComMarkup '+
             '    from LucroPedido lp1 '+
             '    where lp1.idpedido = p.Id '+
             '  ), '+

             '  ( '+
             '    select '+
             '      p.Total-sum(lp2.SomarValorCustoMarkup) DiferencaPedido '+
             '    from LucroPedido lp2 '+
             '    where lp2.idpedido = p.Id   ) '+

             'from cad_ped P '+
             'inner join LucroPedido  LP on LP.idpedido = P.Id '+
             'inner join Cad_Pro     pro on pro.id      = LP.idproduto '+
             'inner join Cad_Cli       c on c.id        = p.idpessoa '+
             'inner join Cad_Regiao    r on r.id        = c.cod_rep '+
             '   ) ');
var
 lSomar : Currency;
Begin
  FWhere :='';
  FGrupo := '';

  if FiltrarComPeriodo then
    FWhere := ('where DataPedido between ''' + FormatDateTime('dd.mm.yyyy', FDataInicio) + '''' +
               'and ''' + FormatDateTime('dd.mm.yyyy', FDataFim) + '''');

  if aValue<>'' then
    if FWhere<>'' then
    case FTipoFiltro of
      0 : FWhere :=FWhere+ ('and IdPedido='+aValue+' ');
      1 : FWhere :=FWhere+ ('and IdPessoa='+aValue+' ');
      2 : FWhere :=FWhere+ ('and IdRegiao='+aValue+' ');
      3 : FWhere :=FWhere+ ('and NomePessoa CONTAINING ''' + aValue + ''' ');
      4 : FWhere :=FWhere+ ('and Regiao CONTAINING ''' + aValue + ''' ');
    end;

  if aValue<>'' then
    if FWhere='' then
    case FTipoFiltro of
      0 : FWhere := ('where IdPedido='+aValue+' ');
      1 : FWhere := ('where IdPessoa='+aValue+' ');
      2 : FWhere := ('where IdRegiao='+aValue+' ');
      3 : FWhere := ('where NomePessoa CONTAINING ''' + aValue + ''' ');
      4 : FWhere := ('where Regiao CONTAINING ''' + aValue + ''' ');
    end;


  FGrupo :=('group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 ');

  dmPrincipal.FDQueryLucroPedido.Active := False;
  dmPrincipal.FDQueryLucroPedido.SQL.Clear;
  try
    lSomar :=0;
    dmPrincipal.FDQueryLucroPedido.SQL.Text := constSQL + FWhere + FGrupo;
    dmPrincipal.FDQueryLucroPedido.Active := True;
    if not dmPrincipal.FDQueryLucroPedido.IsEmpty then
    begin
     SetValorPedido  (dmPrincipal.FDQueryLucroPedido.FieldByName('ValorPedido').AsCurrency);
     SetAliquotaFinal(dmPrincipal.FDQueryLucroPedido.FieldByName('AliquotaFinal').AsCurrency);
     SetSomaCusto    (dmPrincipal.FDQueryLucroPedido.FieldByName('SomaCusto').AsCurrency);

     FDQueryUpdate.Active := False;
     FDQueryUpdate.SQL.Clear;
     FDQueryUpdate.SQL.Text :=('update LucroPedido set '+
                               'AliquotaFinal = '+StringReplace(CurrToStr(AliquotaFinal), ',', '.', [RFReplaceAll]) + ' '+
                               'where IdPedido= '+IntToStr(IdPedido)+' ');
     FDQueryUpdate.ExecSQL;
     Result := True;
    end
    else
     Result := False;
  Finally
    FWhere:='';
    FGrupo:='';
  end;
end;

procedure TLucroPedido.BuscarPedido;
const
  constSQL =('select '+
             'p.id, '+
             'ip.id_pro IdProduto, '+
             'c.cod_regiao IdRegiao, '+
             'ip.valor ValorUnitario, '+
             'ip.qtde Qtde, '+
             'ip.sub_total SomaItem, '+
             'p.vl_desconto ValorDesconto, '+
             'p.total ValorPedido '+
             'from cad_ped p '+
             'inner join cad_cli       c on c.id       = p.idpessoa '+
             'inner join cad_item_ped ip on ip.cod_ped = p.cod_ped ');
var
 lSomar, lSomar1, lSomar2 : Currency;
begin
  FWhere :='';
  FOrdem :='';
  FWhere :=('where p.id='+IntToStr(IdPedido)+' ');
  FOrdem :=('order by p.id asc, ip.item asc ');

  dmPrincipal.FDQueryLucroPedido.Active := False;
  dmPrincipal.FDQueryLucroPedido.SQL.Clear;
  lSomar := 0;
  lSomar1:=0;
  lSOmar2:=0;
  FSomar1:=0;
  Try
   dmPrincipal.FDQueryLucroPedido.SQL.Text := constSQL + FWhere + FOrdem;
   dmPrincipal.FDQueryLucroPedido.Active := True;


   DeleteLucroPedido;

   dmPrincipal.FDQueryLucroPedido.First;
   while not dmPrincipal.FDQueryLucroPedido.Eof do
   begin
    SetIdProduto    (dmPrincipal.FDQueryLucroPedido.FieldByName('IdProduto').AsInteger);
    SetIdRegiao     (dmPrincipal.FDQueryLucroPedido.FieldByName('IdRegiao').AsInteger);
    SetValorUnitario(dmPrincipal.FDQueryLucroPedido.FieldByName('ValorUnitario').AsCurrency);
    SetQtde         (dmPrincipal.FDQueryLucroPedido.FieldByName('Qtde').AsCurrency);
    SetSomaItem     (dmPrincipal.FDQueryLucroPedido.FieldByName('SomaItem').AsCurrency);

    if BuscarTabelaPreco then
    begin
     lSomar  := SomaItem - SomaCusto;
     lSomar1 := lSomar / SomaCusto * 100;
     lSomar2 := lSomar2 + lSomar1;
     SetAliquotaItem(lSomar1);

     if AliquotaItem <0 then
      SetStatus(0);

     if AliquotaItem =0 then
      SetStatus(1);

     if AliquotaItem >0 then
      SetStatus(2);


     InsertTabelaLucroPedido;
    end;
    dmPrincipal.FDQueryLucroPedido.Next;
   end;

  Finally
   FWhere:='';
   FOrdem:='';
   FSomar :=0;
   lSomar :=0;
   lSomar1:=0;
   lSomar2:=0;
   dmPrincipal.FDQueryLucroPedido.Active := False;
  end;

end;

function  TLucroPedido.BuscarTabelaPreco: Boolean;
const
  constSQL =('select '+
             'mn.idregiao, '+
             'mproi.idproduto, '+
             'tp.valorcusto, '+
             'tp.valorvendaavista '+
             'from tabelapreco tp '+
             'inner join markupnome           mn on mn.id                 = tp.idmarkupnome '+
             'inner join modeloproduto      mpro on mpro.idmodelo         = tp.idmodelo '+
             'inner join modeloprodutoitem mproi on mproi.idmodeloproduto = mpro.id ');
begin
  FWhere :='where mn.IdRegiao ='+IntToStr(IdRegiao)+' '+
           'and mproi.IdProduto='+IntToStr(IdProduto)+' ';

  FSomar :=0 ;
  Result := False;
  FDQueryBuscar.Active := False;
  FDQueryBuscar.SQL.Clear;
  FDQueryBuscar.SQL.Text := constSQL + FWhere;
  FDQueryBuscar.Active := True;

  if not FDQueryBuscar.IsEmpty then
  begin
   try
     Result := True;
     SetValorCusto (FDQueryBuscar.FieldByName('ValorCusto').AsCurrency);
     SetValorTabela(FDQueryBuscar.FieldByName('ValorVendaaVista').AsCurrency);
     FSomar        := FDQueryBuscar.FieldByName('ValorCusto').AsCurrency * Qtde;
     SetSomaCusto  (FSomar);
     FSomar        := 0;
     FSomar        := ValorTabela * Qtde;
     SetSomaTabela(FSomar);
   finally
     FDQueryBuscar.Active := False;
   end;
  end
  else
  Result := False;
end;

procedure TLucroPedido.DeleteLucroPedido;
const
  constDelete =('delete from LucroPedido ');
begin
  FWhere :='';
  FWhere :=('where IdPedido='+IntToStr(IdPedido)+' ');

  FDQueryDelete.Active := False;
  FDQueryDelete.SQL.Clear;
  try
    FDQueryDelete.SQL.Text :=('select IdPedido '+
                             'from LucroPedido '+
                             'Where IdPedido='+IntToStr(IdPedido)+' ');
    FDQueryDelete.Active := True;

    if not FDQueryDelete.IsEmpty then
    begin
     FDQueryDelete.Active := False;
     FDQueryDelete.SQL.Clear;
     FDQueryDelete.SQL.Text :=(constDelete + FWhere);
     FDQueryDelete.ExecSQL;
    end;
  finally
   FDQueryDelete.Active := False;
  end;
end;

procedure TLucroPedido.InsertTabelaLucroPedido;
const
  constInsert = ('insert into LucroPedido '+
                 '( '+
                 'idpedido, '+
                 'idproduto, '+
                 'ValorUnitario, '+
                 'Qtde, '+
                 'SomaItem, '+
                 'ValorCusto, '+
                 'SomaCusto, '+
                 'ValorTabela, '+
                 'SomaTabela, '+
                 'AliquotaItem, '+
                 'AliquotaFinal, '+
                 'Status, '+
                 'DataLancamento, '+
                 'HoraLancamento, '+
                 'Operador '+
                 ') '+
                 'values ');
begin
  FDQueryInsert.Active := False;
  FDQueryInsert.SQL.Clear;
  try
    FDQueryInsert.SQL.Text :=(
                           constInsert +
                           '( '+
                           ''+IntToStr(IdPedido)+', '+
                           ''+IntToStr(IdProduto)+', '+
                           StringReplace(CurrToStr(ValorUnitario), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(Qtde), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(SomaItem), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(ValorCusto), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(SomaCusto), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(ValorTabela), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(SomaTabela), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(AliquotaItem), ',', '.', [RFReplaceAll]) + ', '+
                           StringReplace(CurrToStr(AliquotaFinal), ',', '.', [RFReplaceAll]) + ', '+
                           ''+IntToStr(Status)+', '+
                           ''''+FormatDateTime('dd.mm.yyyy',Now)+''', '+
                           ''''+FormatDateTime('hh:mm:ssss',Now)+''', '+
                           ''''+Operador+''' '+
                           ') '
                          );
    FDQueryInsert.ExecSQL;
  finally
    FDQueryInsert.Active := False;
  end;
end;

procedure TLucroPedido.SetIdPedido(const Value: Integer);
begin
  FIdPedido := Value;
end;

procedure TLucroPedido.SetIdProduto(const Value: Integer);
begin
  FIdProduto := Value;
end;

procedure TLucroPedido.SetIdRegiao(const Value: Integer);
begin
  FIdRegiao := Value;
end;

procedure TLucroPedido.SetValorUnitario(const Value: Currency);
begin
  FValorUnitario := Value;
end;

procedure TLucroPedido.SetQtde(const Value: Currency);
begin
  FQtde := Value;
end;

procedure TLucroPedido.SetSomaItem(const Value: Currency);
begin
  FSomaItem := Value;
end;

procedure TLucroPedido.SetValorCusto(const Value: Currency);
begin
  FValorCusto := Value;
end;

procedure TLucroPedido.SetValorTabela(const Value: Currency);
begin
  FValorTabela := Value;
end;

procedure TLucroPedido.SetAliquotaItem(const Value: Currency);
begin
  FAliquotaItem := Value;
end;

procedure TLucroPedido.SetChamarFormLucroPedido(const Value: Integer);
begin
  FChamarFormLucroPedido := Value;
end;

procedure TLucroPedido.SetAliquotaFinal(const Value: Currency);
begin
  FAliquotaFinal := Value;
end;

procedure TLucroPedido.SetStatus(const Value: Integer);
begin
  FStatus := Value;
end;

procedure TLucroPedido.SetDataLancamento(const Value: TDateTime);
begin
  FDataLancamento := Value;
end;

procedure TLucroPedido.SetFiltrarComPeriodo(const Value: Boolean);
begin
  FFiltrarComPeriodo := Value;
end;

procedure TLucroPedido.SetHoraLancamento(const Value: TDateTime);
begin
  FHoraLancamento := Value;
end;

procedure TLucroPedido.SetOperador(const Value: String);
begin
  FOperador := Value;
end;

procedure TLucroPedido.SetSomaCusto(const Value: Currency);
begin
  FSomaCusto := Value;
end;

procedure TLucroPedido.SetSomaTabela(const Value: Currency);
begin
  FSomaTabela := Value;
end;

procedure TLucroPedido.SetValorPedido(const Value: Currency);
begin
  FValorPedido := Value;
end;

procedure TLucroPedido.SetTipoFiltro(const Value: Integer);
begin
  FTipoFiltro := Value;
end;

procedure TLucroPedido.SetDataFim(const Value: TDateTime);
begin
  FDataFim := Value;
end;

procedure TLucroPedido.SetDataInicio(const Value: TDateTime);
begin
  FDataInicio := Value;
end;

end.
