unit Supremo.Entidade.Model;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory,
  Whorkshop.Model.Entidades.Interfaces;

type
  TModel = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;

    FEscolhaFiltro: Integer;
    FEscolhaTipoData : Integer;
    FEscolhaTipoLancamento : Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FStatus : Integer;

    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;
    FIdModelo : String;
    FIdProduto : String;
    FIdParametro1 : String;
    FIdParametro2 : String;
    FValorLancamento1 : Currency;
    FValorLancamento2 : Currency;
    FQtdeInteger : Integer;
    FQtdeCurrency : Currency;
    FAliquota : Currency;
    FPrazoMedio : Currency;
    FInicioPeriodo : TDateTime;
    FFimPeriodo : TDateTime;

    FGenId : Integer;

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function EscolhaTipoData(aValue : Integer) : iModelEntidade;
    function EscolhaTipoLancamento(aValue : Integer) : iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Status(aValue : Integer) :iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;
    function IdModelo(aValue: String): iModelEntidade;
    function IdProduto(aValue: String): iModelEntidade;
    function IdParametro1(aValue : String) : iModelEntidade;
    function IdParametro2(aValue : String) : iModelEntidade;
    function ValorLancamento1(aValue : Currency) : iModelEntidade;
    function ValorLancamento2(aValue : Currency) : iModelEntidade;
    function Qtde(aValue : Integer) : iModelEntidade; overload;
    function Qtde(aValue : Currency) : iModelEntidade; overload;
    function Aliquota(aValue : Currency) : iModelEntidade;
    function PrazoMedio(aValue : Currency) : iModelEntidade;
    function InicioPeriodo(aValue : TDateTime) : iModelEntidade;
    function FimPeriodo(aValue : TDateTime) : iModelEntidade;

    function Buscar(aValue: String): iModelEntidade; overload;
    function Buscar(aValue: Integer): iModelEntidade; overload;
    function Insert: iModelEntidade; overload;
    function Insert(aValue: String): iModelEntidade; overload;
    function Update(aValue: String): iModelEntidade;
    function Delete(aValue : String) : iModelEntidade;
    function PegarGenId : Integer;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TProductModel }

constructor TModel.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

destructor TModel.Destroy;
begin
  inherited;
end;

class function TModel.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TModel.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TModel.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TModel.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

function TModel.EscolhaTipoData(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoData := aValue;
end;

function TModel.EscolhaTipoLancamento(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaTipoLancamento := aValue;
end;

function TModel.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

function TModel.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TModel.Status(aValue : Integer) :iModelEntidade;
begin
  Result := Self;
  FStatus := aValue;
end;

function TModel.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

function TModel.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TModel.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TModel.IdModelo(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdModelo := aValue;
end;

function TModel.IdProduto(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdProduto := aValue;
end;

function TModel.IdParametro1(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro1 := aValue;
end;

function TModel.IdParametro2(aValue: String): iModelEntidade;
begin
  Result := Self;
  FIdParametro2 := aValue;
end;

function TModel.ValorLancamento1(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento1 := aValue;
end;

function TModel.ValorLancamento2(aValue: Currency): iModelEntidade;
begin
  Result := Self;
  FValorLancamento2 := aValue;
end;

function TModel.Qtde(aValue : Integer) : iModelEntidade;
begin
  Result := Self;
  FQtdeInteger := aValue;
end;

function TModel.Qtde(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FQtdeCurrency := aValue;
end;


function TModel.Aliquota(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FAliquota := aValue;
end;

function TModel.PrazoMedio(aValue : Currency) : iModelEntidade;
begin
  Result := Self;
  FPrazoMedio := aValue;
end;

function TModel.InicioPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FInicioPeriodo := aValue;
end;

function TModel.FimPeriodo(aValue : TDateTime) : iModelEntidade;
begin
  Result := Self;
  FFimPeriodo := aValue;
end;

function TModel.Buscar(aValue: String): iModelEntidade;
const
  cSQL =(
         'select '+
         'm.Id, '+
         'm.Descricao, '+
         'm.QtdeProducao, '+
         'm.Operador, '+
         'm.DataLancamento, '+
         'm.Ativo '+
         'from modelo m '
        );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where m.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and m.Id=' + aValue + ' ');
      1: lWhere := lWhere + ('and m.Descricao CONTAINING ''' + aValue + ''' ');
      2: lWhere := lWhere + ('and m.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open(cSQL + lWhere);
end;

function TModel.Buscar(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  //Criar segundo buscar quando precisar
end;

function TModel.Insert: iModelEntidade;
const
  cInsert = (
             'insert into modelo ' +
             '( ' +
             'Descricao, ' +
             'Operador, ' +
             'DataLancamento, ' +
             'Ativo ' +
             ') '
             );
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';

  lInsert := cInsert +
    'values ' +
    '( ' +
    '''' + FDescricao + ''',' +
    '''' + FOperador + ''',' +
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    IntToStr(1)+' '+//Ativo 0->Inativo  - 1 Ativo
    ') ';
  FQuery.ExecSQL(lInsert);
end;

function TModel.Insert(aValue: String): iModelEntidade;
begin
  Result := Self;
  //Criar segundo insert quando precisar
end;

function TModel.Update(aValue: String): iModelEntidade;
const
  cUpdate = ('update modelo set ');
begin
  Result := Self;
  FQuery.ExecSQL(cUpdate +
    'descricao=''' + FDescricao + ''',' +
    'ativo=' + IntToStr(FAtivo) + '' +
    'where Id=' + aValue + ' ');
end;

function TModel.Delete(aValue: String): iModelEntidade;
begin
  Result := Self;
  FQuery.ExecSQL('delete from Modelo where Id='+aValue+'');
end;

function TModel.PegarGenId : Integer;
begin
  Result := 0;
end;


//JSON
function TModel.Get(const aValue: String): iModelEntidade;
const
    cSQL = (
      'select ' +
      'pro.id_pro Id, ' +
      'pro.enviar, ' +
      'pro.descricao, ' +
      'pro.usuario, ' +
      'case ' +
      '  When pro.ativo=''NAO'' then 0 else 1 ' +
      'end Ativo ' +
      'from cad_pro pro '
      );
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where m.Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0: lWhere := lWhere + ('and m.Id=' + aValue + ' ');
      1: lWhere := lWhere + ('and m.Descricao CONTAINING ''' + aValue + ''' ');
      2: lWhere := lWhere + ('and m.Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Get(cSQL + lWhere);
end;

end.
