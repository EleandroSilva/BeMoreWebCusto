unit Supremo.Entidade.ProductModel;

interface

uses
  Data.DB,
  System.SysUtils,

  Whorkshop.Model.Connection.Interfaces,
  Whorkshop.Model.Connection.Factory,
  Whorkshop.Model.Entidades.Interfaces;

type
  TProductModel = class(TInterfacedObject, iModelEntidade)
  private
    FQuery: iModelQuery;
    FEscolhaFiltro: Integer;
    FTextoFiltro: String;
    FAtivo: Integer;
    FDescricao: String;
    FOperador: String;
    FDataLancamento: TDateTime;

    const
    constInsert = ('insert into modelo ' +
      '( ' +
      'Descricao, ' +
      'Operador, ' +
      'DataLancamento, ' +
      'Ativo ' +
      ') ');

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iModelEntidade;

    function DataSet(aValue: TDataSource): iModelEntidade; overload;
    function DataSet(aValue: TDataSet): iModelEntidade; overload;

    function EscolhaFiltro(aValue: Integer): iModelEntidade;
    function TextoFiltro(aValue: String): iModelEntidade;
    function Ativo(aValue: Integer): iModelEntidade;
    function Buscar(aValue: String): iModelEntidade;
    function Insert: iModelEntidade;

    function Descricao(aValue: String): iModelEntidade;
    function Operador(aValue: String): iModelEntidade;
    function DataLancamento(aValue: TDateTime): iModelEntidade;

    function Get(const aValue: String = ''): iModelEntidade;
  end;

implementation

{ TProductModel }

function TProductModel.Ativo(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FAtivo := aValue;
end;

function TProductModel.Buscar(aValue: String): iModelEntidade;
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0:lWhere := lWhere + ('and Id=' + aValue + ' ');
      1:lWhere := lWhere + ('and Descricao CONTAINING ''' + aValue + ''' ');
      2:lWhere := lWhere + ('and Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Open('Modelo ' + lWhere);
end;

function TProductModel.Get(const aValue: String): iModelEntidade;
var
  lWhere: String;
begin
  Result := Self;
  lWhere := '';

  lWhere := ('where Ativo=' + IntToStr(FAtivo) + ' ');

  if FTextoFiltro <> '' then
    case FEscolhaFiltro of
      0:
        lWhere := lWhere + ('and Id=' + aValue + ' ');
      1:
        lWhere := lWhere + ('and Descricao CONTAINING ''' + aValue + ''' ');
      2:
        lWhere := lWhere + ('and Operador CONTAINING ''' + aValue + ''' ');
    end;

  FQuery.Get('Modelo ' + lWhere);
end;

function TProductModel.Insert: iModelEntidade;
var
  lInsert: String;
begin
  Result := Self;
  lInsert := '';

  lInsert := constInsert +
    'values ' +
    '( ' +
    '''' + FDescricao + ''',' +
    '''' + FOperador + ''',' +
    '''' + FormatDateTime('dd.mm.yyyy', FDataLancamento) + ''',' +
    '''1''' +
    ') ';
  FQuery.ExecSQL(lInsert);
end;

constructor TProductModel.Create;
begin
  FQuery := TModelConnectionFactory.New.Query;
end;

function TProductModel.DataSet(aValue: TDataSource): iModelEntidade;
begin
  Result := Self;
  aValue.DataSet := FQuery.Query;
end;

function TProductModel.DataLancamento(aValue: TDateTime): iModelEntidade;
begin
  Result := Self;
  FDataLancamento := aValue;
end;

function TProductModel.DataSet(aValue: TDataSet): iModelEntidade;
begin
  Result := Self;
  aValue.Assign(FQuery.Query);
end;

function TProductModel.Descricao(aValue: String): iModelEntidade;
begin
  Result := Self;
  FDescricao := aValue;
end;

destructor TProductModel.Destroy;
begin
  inherited;
end;

function TProductModel.EscolhaFiltro(aValue: Integer): iModelEntidade;
begin
  Result := Self;
  FEscolhaFiltro := aValue;
end;

class function TProductModel.New: iModelEntidade;
begin
  Result := Self.Create;
end;

function TProductModel.Operador(aValue: String): iModelEntidade;
begin
  Result := Self;
  FOperador := aValue;
end;

function TProductModel.TextoFiltro(aValue: String): iModelEntidade;
begin
  Result := Self;
  FTextoFiltro := aValue;
end;

end.
