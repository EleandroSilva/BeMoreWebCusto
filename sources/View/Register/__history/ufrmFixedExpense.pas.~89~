unit ufrmFixedExpense;

interface

uses
  Winapi.Messages,
  Winapi.Windows,

  System.Types,
  System.SysUtils,
  System.Variants,
  System.Classes,
  System.ImageList,

  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.ComCtrls,
  Vcl.StdCtrls,
  Vcl.Mask,
  Vcl.ExtCtrls,
  Vcl.Buttons,
  Vcl.DBCtrls,
  Vcl.ImgList,

  Data.DB,

  ufrmModelo,
  ufrmSearchAccountClass,

  Whorkshop.Controller.Interfaces,
  Whorkshop.Controller;

type
  TfrmFixedExpense = class(TfrmModelo)
    btnModel: TBitBtn;
    Label5: TLabel;
    lDescription: TLabel;
    edtMoney: TEdit;
    lMoney: TLabel;
    pProduct: TPanel;
    Panel8: TPanel;
    Label2: TLabel;
    edtProduct: TEdit;
    btnSearchProduct: TBitBtn;
    dsAccountSearch: TDataSource;
    rgPeriodoContas: TRadioGroup;
    dbgPayAccounts: TDBGrid;
    dsPayAccounts: TDataSource;
    rgChoiceTypeAccount: TRadioGroup;
    Panel7: TPanel;
    ImageList1: TImageList;
    btnInsertContasPagarDespesaFixa: TBitBtn;
    Label3: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSearchClick(Sender: TObject);
    procedure edtDescriptionKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtDescriptionKeyPress(Sender: TObject; var Key: Char);
    procedure edtMoneyKeyPress(Sender: TObject; var Key: Char);
    procedure edtMoneyExit(Sender: TObject);
    procedure btnSalveClick(Sender: TObject);
    procedure DataSource1DataChange(Sender: TObject; Field: TField);
    procedure btnDeleteClick(Sender: TObject);
    procedure edtDescriptionExit(Sender: TObject);
    procedure dbgSearchDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure btnSearchProductClick(Sender: TObject);
    procedure dbgPayAccountsDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure dbgPayAccountsCellClick(Column: TColumn);
    procedure dbgPayAccountsColEnter(Sender: TObject);
    procedure dsPayAccountsDataChange(Sender: TObject; Field: TField);
    procedure btnInsertContasPagarDespesaFixaClick(Sender: TObject);
    procedure dsPayAccountsUpdateData(Sender: TObject);
  private
    FController: iController;
    FId: String;
    procedure Atualizaedt;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmFixedExpense: TfrmFixedExpense;

implementation

{$R *.dfm}


procedure TfrmFixedExpense.Atualizaedt;
begin
  edtId.Text := DataSource1.DataSet.FieldByName('Id').AsString;
  MedtReleaseDate.Text := DataSource1.DataSet.FieldByName('DataLancamento').AsString;
  edtDescription.Text := DataSource1.DataSet.FieldByName('Descricao').AsString;
  edtOperator.Text := DataSource1.DataSet.FieldByName('Operador').AsString;
end;

procedure TfrmFixedExpense.btnDeleteClick(Sender: TObject);
begin
  FId := DataSource1.DataSet.FieldByName('Id').AsString;
  FController
    .Entidades
    .FixedExpense
    .DataSet(DataSource1)
    .DataLancamento(Now)
    .Operador(edtOperator.Text)
    .Insert(DataSource1.DataSet.FieldByName('Id').AsString);

  FController
    .Entidades
    .FixedExpense
    .DataSet(DataSource1)
    .Status(3) // 3 Origem excluída
    .Delete(FId);
end;

procedure TfrmFixedExpense.btnInsertContasPagarDespesaFixaClick(
  Sender: TObject);
begin
  dsPayAccounts.DataSet.First;
  while not dsPayAccounts.DataSet.Eof do
  begin
    if dsPayAccounts.DataSet.FieldByName('Status').AsInteger=1 then
    begin
      FController
        .Entidades
        .FixedExpense
        .DataSet(dsAccountSearch)
        .Ativo(1)
        .EscolhaFiltro(1)//filtro por idclassecontas
        .TextoFiltro(dsPayAccounts.DataSet.FieldByName('IdClasseContas').AsString)
        .Buscar(dsPayAccounts.DataSet.FieldByName('IdClasseContas').AsString);

      if not dsAccountSearch.DataSet.IsEmpty then
      begin
        FController
        .Entidades
        .FixedExpense
        .DataSet(DataSource1)
        .ValorLancamento1(StrToFloat(dsPayAccounts.DataSet.FieldByName('ValorClasse').AsString))
        .DataLancamento(Now)
        .Operador(edtOperator.Text)
        .Status(3) // Origem vindo do contas a pagar
        .Insert(DataSource1.DataSet.FieldByName('Id').AsString);

        FController
          .Entidades
          .FixedExpense
          .DataSet(DataSource1)
          .IdParametro1(dsPayAccounts.DataSet.FieldByName('IdClasseContas').AsString)
          .Delete(dsPayAccounts.DataSet.FieldByName('IdClasseContas').AsString);

      end;

      FController
        .Entidades
        .FixedExpense
        .DataSet(DataSource1)
        .IdParametro1(dsPayAccounts.DataSet.FieldByName('IdClasseContas').AsString)
        .ValorLancamento1(StrToFloat(dsPayAccounts.DataSet.FieldByName('ValorClasse').AsString))
        .DataLancamento(Now)
        .Operador(edtOperator.Text)
        .Status(1) // Origem vindo do contas a pagar
        .Insert;

    end;
    dsPayAccounts.DataSet.Next;
  end;
end;

procedure TfrmFixedExpense.btnNewClick(Sender: TObject);
begin
  inherited;
  edtOperator.Text := FController
    .EntidadesEmpresaLogada
    .DadosEmpresaLogada
    .Operador;
end;

procedure TfrmFixedExpense.btnSalveClick(Sender: TObject);
begin
  FController
    .Entidades
    .FixedExpense
    .DataSet(DataSource1)
    .IdParametro1(edtDescription.Text)
    .ValorLancamento(StrToFloat(edtMoney.Text))
    .DataLancamento(StrToDate(MedtReleaseDate.Text))
    .Operador(edtOperator.Text)
    .Status(2) // Origem lançamento manual
    .Insert;

  inherited;
end;

procedure TfrmFixedExpense.btnSearchClick(Sender: TObject);
begin
  FController
    .Entidades
    .FixedExpense
    .DataSet(DataSource1)
    .Ativo(rgActive.ItemIndex)
    .EscolhaFiltro(rgChoice.ItemIndex)
    .TextoFiltro(edtSearch.Text)
    .Buscar(edtSearch.Text);

  inherited;
  btnDelete.Enabled := true;
end;

procedure TfrmFixedExpense.btnSearchProductClick(Sender: TObject);
begin
  FController
    .Entidades
    .ContasPagar
    .DataSet(dsPayAccounts)
    .EscolhaFiltro(rgPeriodoContas.ItemIndex)
    .EscolhaTipoData(rgChoiceTypeAccount.ItemIndex)
    .Buscar('');
end;

procedure TfrmFixedExpense.DataSource1DataChange(Sender: TObject;
  Field: TField);
begin
  TNumericField(dbgSearch.Fields[3]).DisplayFormat := '#,##0.00';
end;

procedure TfrmFixedExpense.dbgPayAccountsCellClick(Column: TColumn);
begin
  if not dbgPayAccounts.Fields[1].IsNull then
    if Column.Field = dsPayAccounts.DataSet.FieldByName('Status') then
    begin
      dsPayAccounts.DataSet.Edit;

      if dsPayAccounts.DataSet.FieldByName('Status').AsInteger = 1 then
        dsPayAccounts.DataSet.FieldByName('Status').AsInteger := 0
      else
        dsPayAccounts.DataSet.FieldByName('Status').AsInteger := 1;
    end;
end;

procedure TfrmFixedExpense.dbgPayAccountsColEnter(Sender: TObject);
begin
  if dbgPayAccounts.SelectedField = dsPayAccounts.DataSet.FieldByName('Status') then
    dbgPayAccounts.Options := dbgPayAccounts.Options - [DgEditing]
  else
    dbgPayAccounts.Options := dbgPayAccounts.Options + [DgEditing];
end;

procedure TfrmFixedExpense.dbgPayAccountsDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  inherited;
  If Odd(TDBGrid(Sender).DATASOURCE.DataSet.RecNo) Then
    TDBGrid(Sender).Canvas.Brush.Color := $00757575
  Else
    TDBGrid(Sender).Canvas.Brush.Color := $0053A9FF;

  If (State = [GdSelected]) Or (State = [GdFocused]) Or (State = [GdSelected, GdFocused]) Then
  Begin
    TDBGrid(Sender).Canvas.Brush.Color := cl3DLight;
    TDBGrid(Sender).Canvas.Font.Color := clBlack;
  End;
  TDBGrid(Sender).DefaultDrawDataCell(Rect, Column.Field, State);

  // pinta checkbox

  if Column.Field = dsPayAccounts.DataSet.FieldByName('Status') then
  begin
    dbgPayAccounts.Canvas.FillRect(Rect);
    ImageList1.Draw(dbgPayAccounts.Canvas, Rect.Left + 10, Rect.Top + 1, 0);

    if dsPayAccounts.DataSet.FieldByName('Status').AsInteger = 1 then
      ImageList1.Draw(dbgPayAccounts.Canvas, Rect.Left + 10, Rect.Top + 1, 2)
    else
      ImageList1.Draw(dbgPayAccounts.Canvas, Rect.Left + 10, Rect.Top + 1, 0);
  end;
end;

procedure TfrmFixedExpense.dbgSearchDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  If Odd(TDBGrid(Sender).DATASOURCE.DataSet.RecNo) Then
    TDBGrid(Sender).Canvas.Brush.Color := $00757575
  Else
    TDBGrid(Sender).Canvas.Brush.Color := $0053A9FF;

  If (State = [GdSelected]) Or (State = [GdFocused]) Or (State = [GdSelected, GdFocused]) Then
  Begin
    TDBGrid(Sender).Canvas.Brush.Color := cl3DLight;
    TDBGrid(Sender).Canvas.Font.Color := clBlack;
  End;
  TDBGrid(Sender).DefaultDrawDataCell(Rect, Column.Field, State);
end;

procedure TfrmFixedExpense.dsPayAccountsDataChange(Sender: TObject;
  Field: TField);
begin
  TNumericField(dbgPayAccounts.Fields[3]).DisplayFormat := '#,##0.00';
end;

procedure TfrmFixedExpense.dsPayAccountsUpdateData(Sender: TObject);
begin
  dsPayAccounts.DataSet.FieldByName('codigo').ProviderFlags:=[pfInUpdate, pfInWhere, pfInKey];
end;

procedure TfrmFixedExpense.edtMoneyExit(Sender: TObject);
var
  TextOnEdit: UnicodeString;
  Value: Currency;
begin
  TextOnEdit := edtMoney.Text;

  if TryStrToCurr(TextOnEdit, Value) then
    edtMoney.Text := FormatFloat('#,##0.00', Value)
  else
    edtMoney.Text := '0,00'; // se caso não conseguiu converter o valor digitado em número, mostra 0

  Value := StrToFloat(edtMoney.Text);

  if Value > 0 then
  begin
    btnSalve.Enabled := true;
    btnSalve.SetFocus;
  end
  else
    raise Exception.Create('Valor não pode ser menor ou igual a 0')
end;

procedure TfrmFixedExpense.edtMoneyKeyPress(Sender: TObject; var Key: Char);
begin
  if not(Key in ['0' .. '9', ',', #8]) then
    Key := #0;
end;

procedure TfrmFixedExpense.edtDescriptionExit(Sender: TObject);
begin
  if edtDescription.Text = '' then
    raise Exception.Create('Atenção... ' + edtOperator.Text + ' Favor informar Id Modelo!');

  FController
    .Entidades
    .ClasseContas
    .DataSet(dsAccountSearch)
    .Ativo(rgActive.ItemIndex)
    .EscolhaFiltro(0)
    .TextoFiltro(edtDescription.Text)
    .Buscar(edtDescription.Text);

  if not dsAccountSearch.DataSet.IsEmpty then
  begin
    lDescription.Caption := dsAccountSearch.DataSet.FieldByName('Descricao').AsString;
    edtMoney.SetFocus;
  end
  else
    lDescription.Caption := '...';

end;

procedure TfrmFixedExpense.edtDescriptionKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case Key of
    VK_F1:
      begin
        Application.CreateForm(TfrmSearchAccountClass, frmSearchAccountClass);
        frmSearchAccountClass.lfrmExecutando.Caption := 'frmFixedExpense';
        frmSearchAccountClass.btnSearch.Click;
        frmSearchAccountClass.ShowModal;
      end;
  end;
end;

procedure TfrmFixedExpense.edtDescriptionKeyPress(Sender: TObject;
  var Key: Char);
begin
  if not(Key in ['0' .. '9', Chr(8), Chr(6)]) then
    Key := #0;
end;

procedure TfrmFixedExpense.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  frmFixedExpense := nil;
  Action := caFree;
end;

procedure TfrmFixedExpense.FormCreate(Sender: TObject);
begin
  inherited;
  FController := TController.New;

  lSite.Caption := FController
    .EntidadesRedeInfocon
    .DadosRedeInfocon
    .Site;
end;

procedure TfrmFixedExpense.FormShow(Sender: TObject);
begin
  inherited;
  lTextoEmpresa.Caption := 'Despesa Fixa';

  edtOperator.Text := FController
    .EntidadesEmpresaLogada
    .DadosEmpresaLogada
    .Operador;
end;

end.
